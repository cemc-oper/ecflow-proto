// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecflow_client.proto

#include "ecflow_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ecflow_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseStatus_ecflow_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ecflow_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusRecordsResponse_StatusMapEntry_DoNotUse_ecflow_5fclient_2eproto;
namespace ecflow_client {
class ResponseStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseStatus> _instance;
} _ResponseStatus_default_instance_;
class StatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusRequest> _instance;
} _StatusRequest_default_instance_;
class StatusRecordsResponse_StatusMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusRecordsResponse_StatusMapEntry_DoNotUse> _instance;
} _StatusRecordsResponse_StatusMapEntry_DoNotUse_default_instance_;
class StatusRecordsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusRecordsResponse> _instance;
} _StatusRecordsResponse_default_instance_;
class StatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusResponse> _instance;
} _StatusResponse_default_instance_;
class NodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeRequest> _instance;
} _NodeRequest_default_instance_;
class NodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeResponse> _instance;
} _NodeResponse_default_instance_;
}  // namespace ecflow_client
static void InitDefaultsscc_info_NodeRequest_ecflow_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ecflow_client::_NodeRequest_default_instance_;
    new (ptr) ::ecflow_client::NodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecflow_client::NodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeRequest_ecflow_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeRequest_ecflow_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_NodeResponse_ecflow_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ecflow_client::_NodeResponse_default_instance_;
    new (ptr) ::ecflow_client::NodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecflow_client::NodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeResponse_ecflow_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeResponse_ecflow_5fclient_2eproto}, {
      &scc_info_ResponseStatus_ecflow_5fclient_2eproto.base,}};

static void InitDefaultsscc_info_ResponseStatus_ecflow_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ecflow_client::_ResponseStatus_default_instance_;
    new (ptr) ::ecflow_client::ResponseStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecflow_client::ResponseStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseStatus_ecflow_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResponseStatus_ecflow_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_StatusRecordsResponse_ecflow_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ecflow_client::_StatusRecordsResponse_default_instance_;
    new (ptr) ::ecflow_client::StatusRecordsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecflow_client::StatusRecordsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatusRecordsResponse_ecflow_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StatusRecordsResponse_ecflow_5fclient_2eproto}, {
      &scc_info_StatusRecordsResponse_StatusMapEntry_DoNotUse_ecflow_5fclient_2eproto.base,
      &scc_info_ResponseStatus_ecflow_5fclient_2eproto.base,}};

static void InitDefaultsscc_info_StatusRecordsResponse_StatusMapEntry_DoNotUse_ecflow_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ecflow_client::_StatusRecordsResponse_StatusMapEntry_DoNotUse_default_instance_;
    new (ptr) ::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse();
  }
  ::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusRecordsResponse_StatusMapEntry_DoNotUse_ecflow_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusRecordsResponse_StatusMapEntry_DoNotUse_ecflow_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_StatusRequest_ecflow_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ecflow_client::_StatusRequest_default_instance_;
    new (ptr) ::ecflow_client::StatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecflow_client::StatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusRequest_ecflow_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusRequest_ecflow_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_StatusResponse_ecflow_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ecflow_client::_StatusResponse_default_instance_;
    new (ptr) ::ecflow_client::StatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecflow_client::StatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusResponse_ecflow_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatusResponse_ecflow_5fclient_2eproto}, {
      &scc_info_ResponseStatus_ecflow_5fclient_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ecflow_5fclient_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ecflow_5fclient_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ecflow_5fclient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ecflow_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::ResponseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::ResponseStatus, has_error_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::ResponseStatus, error_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRequest, repo_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRequest, host_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRequest, port_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse, owner_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse, repo_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse, collected_timestamp_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse, status_map_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusRecordsResponse, response_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusResponse, owner_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusResponse, repo_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusResponse, collected_timestamp_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::StatusResponse, response_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeRequest, owner_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeRequest, repo_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeRequest, host_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeRequest, port_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeResponse, owner_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeResponse, repo_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeResponse, path_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeResponse, node_),
  PROTOBUF_FIELD_OFFSET(::ecflow_client::NodeResponse, response_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ecflow_client::ResponseStatus)},
  { 7, -1, sizeof(::ecflow_client::StatusRequest)},
  { 16, 23, sizeof(::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse)},
  { 25, -1, sizeof(::ecflow_client::StatusRecordsResponse)},
  { 35, -1, sizeof(::ecflow_client::StatusResponse)},
  { 45, -1, sizeof(::ecflow_client::NodeRequest)},
  { 55, -1, sizeof(::ecflow_client::NodeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecflow_client::_ResponseStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecflow_client::_StatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecflow_client::_StatusRecordsResponse_StatusMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecflow_client::_StatusRecordsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecflow_client::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecflow_client::_NodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecflow_client::_NodeResponse_default_instance_),
};

const char descriptor_table_protodef_ecflow_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ecflow_client.proto\022\recflow_client\"9\n\016"
  "ResponseStatus\022\021\n\thas_error\030\001 \001(\010\022\024\n\014err"
  "or_string\030\002 \001(\t\"H\n\rStatusRequest\022\r\n\005owne"
  "r\030\001 \001(\t\022\014\n\004repo\030\002 \001(\t\022\014\n\004host\030\003 \001(\t\022\014\n\004p"
  "ort\030\004 \001(\t\"\204\002\n\025StatusRecordsResponse\022\r\n\005o"
  "wner\030\001 \001(\t\022\014\n\004repo\030\002 \001(\t\022\033\n\023collected_ti"
  "mestamp\030\003 \001(\003\022G\n\nstatus_map\030\004 \003(\01323.ecfl"
  "ow_client.StatusRecordsResponse.StatusMa"
  "pEntry\0226\n\017response_status\030\005 \001(\0132\035.ecflow"
  "_client.ResponseStatus\0320\n\016StatusMapEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\222\001\n\016Sta"
  "tusResponse\022\r\n\005owner\030\001 \001(\t\022\014\n\004repo\030\002 \001(\t"
  "\022\033\n\023collected_timestamp\030\003 \001(\003\022\016\n\006status\030"
  "\004 \001(\t\0226\n\017response_status\030\005 \001(\0132\035.ecflow_"
  "client.ResponseStatus\"T\n\013NodeRequest\022\r\n\005"
  "owner\030\001 \001(\t\022\014\n\004repo\030\002 \001(\t\022\014\n\004host\030\003 \001(\t\022"
  "\014\n\004port\030\004 \001(\t\022\014\n\004path\030\005 \001(\t\"\177\n\014NodeRespo"
  "nse\022\r\n\005owner\030\001 \001(\t\022\014\n\004repo\030\002 \001(\t\022\014\n\004path"
  "\030\003 \001(\t\022\014\n\004node\030\004 \001(\t\0226\n\017response_status\030"
  "\005 \001(\0132\035.ecflow_client.ResponseStatus2\215\002\n"
  "\023EcflowClientService\022\\\n\024CollectStatusRec"
  "ords\022\034.ecflow_client.StatusRequest\032$.ecf"
  "low_client.StatusRecordsResponse\"\000\022N\n\rCo"
  "llectStatus\022\034.ecflow_client.StatusReques"
  "t\032\035.ecflow_client.StatusResponse\"\000\022H\n\013Co"
  "llectNode\022\032.ecflow_client.NodeRequest\032\033."
  "ecflow_client.NodeResponse\"\000B\016Z\014ecflowcl"
  "ientb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ecflow_5fclient_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ecflow_5fclient_2eproto_sccs[7] = {
  &scc_info_NodeRequest_ecflow_5fclient_2eproto.base,
  &scc_info_NodeResponse_ecflow_5fclient_2eproto.base,
  &scc_info_ResponseStatus_ecflow_5fclient_2eproto.base,
  &scc_info_StatusRecordsResponse_ecflow_5fclient_2eproto.base,
  &scc_info_StatusRecordsResponse_StatusMapEntry_DoNotUse_ecflow_5fclient_2eproto.base,
  &scc_info_StatusRequest_ecflow_5fclient_2eproto.base,
  &scc_info_StatusResponse_ecflow_5fclient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ecflow_5fclient_2eproto_once;
static bool descriptor_table_ecflow_5fclient_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecflow_5fclient_2eproto = {
  &descriptor_table_ecflow_5fclient_2eproto_initialized, descriptor_table_protodef_ecflow_5fclient_2eproto, "ecflow_client.proto", 1092,
  &descriptor_table_ecflow_5fclient_2eproto_once, descriptor_table_ecflow_5fclient_2eproto_sccs, descriptor_table_ecflow_5fclient_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_ecflow_5fclient_2eproto::offsets,
  file_level_metadata_ecflow_5fclient_2eproto, 7, file_level_enum_descriptors_ecflow_5fclient_2eproto, file_level_service_descriptors_ecflow_5fclient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ecflow_5fclient_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ecflow_5fclient_2eproto), true);
namespace ecflow_client {

// ===================================================================

void ResponseStatus::InitAsDefaultInstance() {
}
class ResponseStatus::_Internal {
 public:
};

ResponseStatus::ResponseStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecflow_client.ResponseStatus)
}
ResponseStatus::ResponseStatus(const ResponseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_string().empty()) {
    error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_string_);
  }
  has_error_ = from.has_error_;
  // @@protoc_insertion_point(copy_constructor:ecflow_client.ResponseStatus)
}

void ResponseStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseStatus_ecflow_5fclient_2eproto.base);
  error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  has_error_ = false;
}

ResponseStatus::~ResponseStatus() {
  // @@protoc_insertion_point(destructor:ecflow_client.ResponseStatus)
  SharedDtor();
}

void ResponseStatus::SharedDtor() {
  error_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseStatus& ResponseStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseStatus_ecflow_5fclient_2eproto.base);
  return *internal_default_instance();
}


void ResponseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ecflow_client.ResponseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  has_error_ = false;
  _internal_metadata_.Clear();
}

const char* ResponseStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool has_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.ResponseStatus.error_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecflow_client.ResponseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_error = 1;
  if (this->has_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_error(), target);
  }

  // string error_string = 2;
  if (this->error_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_string().data(), static_cast<int>(this->_internal_error_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.ResponseStatus.error_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecflow_client.ResponseStatus)
  return target;
}

size_t ResponseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecflow_client.ResponseStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_string = 2;
  if (this->error_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_string());
  }

  // bool has_error = 1;
  if (this->has_error() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecflow_client.ResponseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecflow_client.ResponseStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecflow_client.ResponseStatus)
    MergeFrom(*source);
  }
}

void ResponseStatus::MergeFrom(const ResponseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecflow_client.ResponseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_string().size() > 0) {

    error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_string_);
  }
  if (from.has_error() != 0) {
    _internal_set_has_error(from._internal_has_error());
  }
}

void ResponseStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecflow_client.ResponseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStatus::CopyFrom(const ResponseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecflow_client.ResponseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStatus::IsInitialized() const {
  return true;
}

void ResponseStatus::InternalSwap(ResponseStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_string_.Swap(&other->error_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(has_error_, other->has_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusRequest::InitAsDefaultInstance() {
}
class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecflow_client.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repo().empty()) {
    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  // @@protoc_insertion_point(copy_constructor:ecflow_client.StatusRequest)
}

void StatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusRequest_ecflow_5fclient_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:ecflow_client.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusRequest& StatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusRequest_ecflow_5fclient_2eproto.base);
  return *internal_default_instance();
}


void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ecflow_client.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusRequest.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_repo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusRequest.repo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusRequest.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusRequest.port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecflow_client.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusRequest.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repo().data(), static_cast<int>(this->_internal_repo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusRequest.repo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_repo(), target);
  }

  // string host = 3;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusRequest.host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // string port = 4;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusRequest.port");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecflow_client.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecflow_client.StatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repo());
  }

  // string host = 3;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string port = 4;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecflow_client.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecflow_client.StatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecflow_client.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecflow_client.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.repo().size() > 0) {

    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
}

void StatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecflow_client.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecflow_client.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::InternalSwap(StatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repo_.Swap(&other->repo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StatusRecordsResponse_StatusMapEntry_DoNotUse::StatusRecordsResponse_StatusMapEntry_DoNotUse() {}
StatusRecordsResponse_StatusMapEntry_DoNotUse::StatusRecordsResponse_StatusMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StatusRecordsResponse_StatusMapEntry_DoNotUse::MergeFrom(const StatusRecordsResponse_StatusMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StatusRecordsResponse_StatusMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StatusRecordsResponse_StatusMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void StatusRecordsResponse::InitAsDefaultInstance() {
  ::ecflow_client::_StatusRecordsResponse_default_instance_._instance.get_mutable()->response_status_ = const_cast< ::ecflow_client::ResponseStatus*>(
      ::ecflow_client::ResponseStatus::internal_default_instance());
}
class StatusRecordsResponse::_Internal {
 public:
  static const ::ecflow_client::ResponseStatus& response_status(const StatusRecordsResponse* msg);
};

const ::ecflow_client::ResponseStatus&
StatusRecordsResponse::_Internal::response_status(const StatusRecordsResponse* msg) {
  return *msg->response_status_;
}
StatusRecordsResponse::StatusRecordsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecflow_client.StatusRecordsResponse)
}
StatusRecordsResponse::StatusRecordsResponse(const StatusRecordsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_map_.MergeFrom(from.status_map_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repo().empty()) {
    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  if (from._internal_has_response_status()) {
    response_status_ = new ::ecflow_client::ResponseStatus(*from.response_status_);
  } else {
    response_status_ = nullptr;
  }
  collected_timestamp_ = from.collected_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ecflow_client.StatusRecordsResponse)
}

void StatusRecordsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusRecordsResponse_ecflow_5fclient_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collected_timestamp_) -
      reinterpret_cast<char*>(&response_status_)) + sizeof(collected_timestamp_));
}

StatusRecordsResponse::~StatusRecordsResponse() {
  // @@protoc_insertion_point(destructor:ecflow_client.StatusRecordsResponse)
  SharedDtor();
}

void StatusRecordsResponse::SharedDtor() {
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_status_;
}

void StatusRecordsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusRecordsResponse& StatusRecordsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusRecordsResponse_ecflow_5fclient_2eproto.base);
  return *internal_default_instance();
}


void StatusRecordsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ecflow_client.StatusRecordsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_map_.Clear();
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && response_status_ != nullptr) {
    delete response_status_;
  }
  response_status_ = nullptr;
  collected_timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* StatusRecordsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusRecordsResponse.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_repo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusRecordsResponse.repo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collected_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          collected_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> status_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&status_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .ecflow_client.ResponseStatus response_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusRecordsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecflow_client.StatusRecordsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusRecordsResponse.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repo().data(), static_cast<int>(this->_internal_repo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusRecordsResponse.repo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_repo(), target);
  }

  // int64 collected_timestamp = 3;
  if (this->collected_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_collected_timestamp(), target);
  }

  // map<string, string> status_map = 4;
  if (!this->_internal_status_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ecflow_client.StatusRecordsResponse.StatusMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ecflow_client.StatusRecordsResponse.StatusMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_status_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_status_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_status_map().begin();
          it != this->_internal_status_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StatusRecordsResponse_StatusMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_status_map().begin();
          it != this->_internal_status_map().end(); ++it) {
        target = StatusRecordsResponse_StatusMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ecflow_client.ResponseStatus response_status = 5;
  if (this->has_response_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::response_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecflow_client.StatusRecordsResponse)
  return target;
}

size_t StatusRecordsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecflow_client.StatusRecordsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> status_map = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_status_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_status_map().begin();
      it != this->_internal_status_map().end(); ++it) {
    total_size += StatusRecordsResponse_StatusMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repo());
  }

  // .ecflow_client.ResponseStatus response_status = 5;
  if (this->has_response_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_status_);
  }

  // int64 collected_timestamp = 3;
  if (this->collected_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collected_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusRecordsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecflow_client.StatusRecordsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRecordsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusRecordsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecflow_client.StatusRecordsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecflow_client.StatusRecordsResponse)
    MergeFrom(*source);
  }
}

void StatusRecordsResponse::MergeFrom(const StatusRecordsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecflow_client.StatusRecordsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_map_.MergeFrom(from.status_map_);
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.repo().size() > 0) {

    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  if (from.has_response_status()) {
    _internal_mutable_response_status()->::ecflow_client::ResponseStatus::MergeFrom(from._internal_response_status());
  }
  if (from.collected_timestamp() != 0) {
    _internal_set_collected_timestamp(from._internal_collected_timestamp());
  }
}

void StatusRecordsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecflow_client.StatusRecordsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRecordsResponse::CopyFrom(const StatusRecordsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecflow_client.StatusRecordsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRecordsResponse::IsInitialized() const {
  return true;
}

void StatusRecordsResponse::InternalSwap(StatusRecordsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_map_.Swap(&other->status_map_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repo_.Swap(&other->repo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_status_, other->response_status_);
  swap(collected_timestamp_, other->collected_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRecordsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusResponse::InitAsDefaultInstance() {
  ::ecflow_client::_StatusResponse_default_instance_._instance.get_mutable()->response_status_ = const_cast< ::ecflow_client::ResponseStatus*>(
      ::ecflow_client::ResponseStatus::internal_default_instance());
}
class StatusResponse::_Internal {
 public:
  static const ::ecflow_client::ResponseStatus& response_status(const StatusResponse* msg);
};

const ::ecflow_client::ResponseStatus&
StatusResponse::_Internal::response_status(const StatusResponse* msg) {
  return *msg->response_status_;
}
StatusResponse::StatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecflow_client.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repo().empty()) {
    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_response_status()) {
    response_status_ = new ::ecflow_client::ResponseStatus(*from.response_status_);
  } else {
    response_status_ = nullptr;
  }
  collected_timestamp_ = from.collected_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ecflow_client.StatusResponse)
}

void StatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusResponse_ecflow_5fclient_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collected_timestamp_) -
      reinterpret_cast<char*>(&response_status_)) + sizeof(collected_timestamp_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:ecflow_client.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_status_;
}

void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusResponse& StatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusResponse_ecflow_5fclient_2eproto.base);
  return *internal_default_instance();
}


void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ecflow_client.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && response_status_ != nullptr) {
    delete response_status_;
  }
  response_status_ = nullptr;
  collected_timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusResponse.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_repo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusResponse.repo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collected_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          collected_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.StatusResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ecflow_client.ResponseStatus response_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecflow_client.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusResponse.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repo().data(), static_cast<int>(this->_internal_repo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusResponse.repo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_repo(), target);
  }

  // int64 collected_timestamp = 3;
  if (this->collected_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_collected_timestamp(), target);
  }

  // string status = 4;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.StatusResponse.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // .ecflow_client.ResponseStatus response_status = 5;
  if (this->has_response_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::response_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecflow_client.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecflow_client.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repo());
  }

  // string status = 4;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .ecflow_client.ResponseStatus response_status = 5;
  if (this->has_response_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_status_);
  }

  // int64 collected_timestamp = 3;
  if (this->collected_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_collected_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecflow_client.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecflow_client.StatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecflow_client.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecflow_client.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.repo().size() > 0) {

    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_response_status()) {
    _internal_mutable_response_status()->::ecflow_client::ResponseStatus::MergeFrom(from._internal_response_status());
  }
  if (from.collected_timestamp() != 0) {
    _internal_set_collected_timestamp(from._internal_collected_timestamp());
  }
}

void StatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecflow_client.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecflow_client.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repo_.Swap(&other->repo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_status_, other->response_status_);
  swap(collected_timestamp_, other->collected_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeRequest::InitAsDefaultInstance() {
}
class NodeRequest::_Internal {
 public:
};

NodeRequest::NodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecflow_client.NodeRequest)
}
NodeRequest::NodeRequest(const NodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repo().empty()) {
    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:ecflow_client.NodeRequest)
}

void NodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeRequest_ecflow_5fclient_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeRequest::~NodeRequest() {
  // @@protoc_insertion_point(destructor:ecflow_client.NodeRequest)
  SharedDtor();
}

void NodeRequest::SharedDtor() {
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRequest& NodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeRequest_ecflow_5fclient_2eproto.base);
  return *internal_default_instance();
}


void NodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ecflow_client.NodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeRequest.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_repo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeRequest.repo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeRequest.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeRequest.port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecflow_client.NodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeRequest.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repo().data(), static_cast<int>(this->_internal_repo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeRequest.repo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_repo(), target);
  }

  // string host = 3;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeRequest.host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // string port = 4;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeRequest.port");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_port(), target);
  }

  // string path = 5;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeRequest.path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecflow_client.NodeRequest)
  return target;
}

size_t NodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecflow_client.NodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repo());
  }

  // string host = 3;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string port = 4;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // string path = 5;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecflow_client.NodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecflow_client.NodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecflow_client.NodeRequest)
    MergeFrom(*source);
  }
}

void NodeRequest::MergeFrom(const NodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecflow_client.NodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.repo().size() > 0) {

    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void NodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecflow_client.NodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRequest::CopyFrom(const NodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecflow_client.NodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRequest::IsInitialized() const {
  return true;
}

void NodeRequest::InternalSwap(NodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repo_.Swap(&other->repo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeResponse::InitAsDefaultInstance() {
  ::ecflow_client::_NodeResponse_default_instance_._instance.get_mutable()->response_status_ = const_cast< ::ecflow_client::ResponseStatus*>(
      ::ecflow_client::ResponseStatus::internal_default_instance());
}
class NodeResponse::_Internal {
 public:
  static const ::ecflow_client::ResponseStatus& response_status(const NodeResponse* msg);
};

const ::ecflow_client::ResponseStatus&
NodeResponse::_Internal::response_status(const NodeResponse* msg) {
  return *msg->response_status_;
}
NodeResponse::NodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ecflow_client.NodeResponse)
}
NodeResponse::NodeResponse(const NodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repo().empty()) {
    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node().empty()) {
    node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from._internal_has_response_status()) {
    response_status_ = new ::ecflow_client::ResponseStatus(*from.response_status_);
  } else {
    response_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ecflow_client.NodeResponse)
}

void NodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeResponse_ecflow_5fclient_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_status_ = nullptr;
}

NodeResponse::~NodeResponse() {
  // @@protoc_insertion_point(destructor:ecflow_client.NodeResponse)
  SharedDtor();
}

void NodeResponse::SharedDtor() {
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_status_;
}

void NodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeResponse& NodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeResponse_ecflow_5fclient_2eproto.base);
  return *internal_default_instance();
}


void NodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ecflow_client.NodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && response_status_ != nullptr) {
    delete response_status_;
  }
  response_status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* NodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeResponse.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_repo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeResponse.repo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeResponse.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecflow_client.NodeResponse.node"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ecflow_client.ResponseStatus response_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecflow_client.NodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeResponse.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repo().data(), static_cast<int>(this->_internal_repo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeResponse.repo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_repo(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeResponse.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // string node = 4;
  if (this->node().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecflow_client.NodeResponse.node");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node(), target);
  }

  // .ecflow_client.ResponseStatus response_status = 5;
  if (this->has_response_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::response_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecflow_client.NodeResponse)
  return target;
}

size_t NodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecflow_client.NodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string repo = 2;
  if (this->repo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repo());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string node = 4;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // .ecflow_client.ResponseStatus response_status = 5;
  if (this->has_response_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecflow_client.NodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecflow_client.NodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecflow_client.NodeResponse)
    MergeFrom(*source);
  }
}

void NodeResponse::MergeFrom(const NodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecflow_client.NodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.repo().size() > 0) {

    repo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repo_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.has_response_status()) {
    _internal_mutable_response_status()->::ecflow_client::ResponseStatus::MergeFrom(from._internal_response_status());
  }
}

void NodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecflow_client.NodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeResponse::CopyFrom(const NodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecflow_client.NodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeResponse::IsInitialized() const {
  return true;
}

void NodeResponse::InternalSwap(NodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repo_.Swap(&other->repo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_.Swap(&other->node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_status_, other->response_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ecflow_client
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ecflow_client::ResponseStatus* Arena::CreateMaybeMessage< ::ecflow_client::ResponseStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ecflow_client::ResponseStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ecflow_client::StatusRequest* Arena::CreateMaybeMessage< ::ecflow_client::StatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ecflow_client::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ecflow_client::StatusRecordsResponse_StatusMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ecflow_client::StatusRecordsResponse* Arena::CreateMaybeMessage< ::ecflow_client::StatusRecordsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ecflow_client::StatusRecordsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ecflow_client::StatusResponse* Arena::CreateMaybeMessage< ::ecflow_client::StatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ecflow_client::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ecflow_client::NodeRequest* Arena::CreateMaybeMessage< ::ecflow_client::NodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ecflow_client::NodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ecflow_client::NodeResponse* Arena::CreateMaybeMessage< ::ecflow_client::NodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ecflow_client::NodeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
